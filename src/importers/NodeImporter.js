// Generated by CoffeeScript 1.10.0
(function() {
  var Importer, Papa, async, fs, iImport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./iImport');

  Papa = require('babyparse');

  fs = require('fs');

  async = require('async');

  Importer = (function(superClass) {
    extend(Importer, superClass);

    function Importer(config) {
      this.config = config;
    }

    Importer.prototype.importKeyValue = function(filename, repo, callback) {
      var contents, data, id, j, k, len, node, result, v;
      contents = fs.readFileSync(filename, 'utf8');
      result = Papa.parse(contents, this.config);
      data = result.data;
      repo.pipeline();
      for (j = 0, len = data.length; j < len; j++) {
        node = data[j];
        if (this.config.nodeIdName === '') {
          id = ((function() {
            var results;
            results = [];
            for (k in node) {
              v = node[k];
              results.push(v);
            }
            return results;
          })()).reduce(function(x, y) {
            return "" + x + "_" + y;
          });
        } else {
          id = node[this.config.nodeIdName];
        }
        console.log("id: " + id);
        node.type = this.config.nodeType;
        node.id = id;
        repo.set(id, node, function(error, result) {
          if (error != null) {
            callback(error, null);
          }
        });
      }
      repo.exec(callback);
    };

    Importer.prototype["import"] = function(filename, repo, callback) {
      var addFuncs, contents, data, i, j, len, makeAdd, node, result;
      contents = fs.readFileSync(filename, 'utf8');
      result = Papa.parse(contents, this.config);
      data = result.data;
      makeAdd = function(node) {
        return function(callback) {
          return repo.find(JSON.stringify({
            zip: node.zip
          }), function(error, result) {
            if (result.body.length === 0) {
              repo.add(node, function(error, result) {
                if ((error != null)) {
                  console.log(error);
                }
                callback(error, result);
              });
            } else {
              callback(error, result);
            }
          });
        };
      };
      addFuncs = [];
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        node = data[i];
        addFuncs.push(makeAdd(node));
      }
      return async.parallelLimit(addFuncs, 10, function(error, result) {
        if (error != null) {
          console.log(error);
        }
        callback(error, result);
      });
    };

    return Importer;

  })(iImport);

  module.exports = Importer;

}).call(this);

//# sourceMappingURL=NodeImporter.js.map
