// Generated by CoffeeScript 1.10.0
(function() {
  var Papa, ZipCodeImporter, fs, iImport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./iImport');

  Papa = require('babyparse');

  fs = require('fs');

  ZipCodeImporter = (function(superClass) {
    extend(ZipCodeImporter, superClass);

    function ZipCodeImporter(config) {
      this.config = config;
    }

    ZipCodeImporter.prototype["import"] = function(filename1, filename2, repo, callback) {
      var LtlCodes, ZipCodes, build, contents, contentsCodes, i, j, len, result1, result2, zip3s, zipcode;
      contents = fs.readFileSync(filename1, 'utf8');
      result1 = Papa.parse(contents, this.config);
      ZipCodes = result1.data;
      contentsCodes = fs.readFileSync(filename2, 'utf8');
      result2 = Papa.parse(contentsCodes, this.config);
      LtlCodes = result2.data;
      zip3s = {};
      for (i = j = 0, len = ZipCodes.length; j < len; i = ++j) {
        zipcode = ZipCodes[i];
        if (i === 0) {
          continue;
        }
        zipcode.zip3 = zipcode.zip.substring(0, 3);
        if (!zip3s[zipcode.zip3]) {
          zipcode.type = "Zip";
          zipcode.zip = [zipcode.zip];
          zip3s[zipcode.zip3] = zipcode;
        } else {
          zip3s[zipcode.zip3].zip.push(zipcode.zip);
        }
      }
      console.log("finished fixing up zip codes");
      build = function(ix, codes, zips, callback) {
        var count, id, key, ltlcode;
        ltlcode = codes[ix];
        repo.pipeline();
        count = 0;
        for (key in zips) {
          zipcode = zips[key];
          zipcode.ltlCode = ltlcode.ltlCode;
          zipcode.weightLo = ltlcode.weightLo;
          zipcode.weightHi = ltlcode.weightHi;
          id = zipcode.zip3 + "_" + zipcode.ltlCode + "_" + zipcode.weightLo + "_" + zipcode.weightHi;
          zipcode.id = id;
          repo.set(id, zipcode, function(error, result) {
            if (error != null) {
              callback(error, null);
            }
          });
          count++;
        }
        console.log("Doing Chunk: " + ix);
        repo.exec(function(error, result) {
          if (ix < codes.length && (codes[ix + 1] != null)) {
            console.log("next chunck: " + (ix + 1));
            build(ix + 1, codes, zips, callback);
          } else {
            console.log("finished");
            callback(error, result);
          }
        });
      };
      build(1, LtlCodes, zip3s, callback);
    };

    return ZipCodeImporter;

  })(iImport);

  module.exports = ZipCodeImporter;

}).call(this);

//# sourceMappingURL=ZipCodeLtlCodeImporter.js.map
