// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, Papa, async, cleanupAndCollateWarehouses, fs, geodist, iImport, math, papaConfig,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./../iImport');

  fs = require('fs');

  async = require('async');

  math = require('mathjs');

  geodist = require('geodist');

  fs = require('fs');

  cleanupAndCollateWarehouses = require('cleanupAndCollateWarehouses');

  Papa = require('babyparse');

  papaConfig = {
    delimiter: ",",
    newline: "",
    header: true,
    dynamicTyping: false,
    preview: 0,
    encoding: "UTF-8",
    worker: false,
    comments: false,
    step: void 0,
    download: false,
    skipEmptyLines: false,
    fastMode: false
  };

  Builder = (function(superClass) {
    extend(Builder, superClass);

    function Builder(config, repo1) {
      this.config = config;
      this.repo = repo1 != null ? repo1 : null;
      this.buildWarehousesToSatellites = bind(this.buildWarehousesToSatellites, this);
      this.wireupSatellites = bind(this.wireupSatellites, this);
    }

    Builder.prototype.setRepo = function(repo) {
      return this.repo = repo;
    };

    Builder.prototype.wireupSatellites = function(warehouses, callback) {
      var bdwp, cost, distance, found, i, id1, id2, j, len, len1, obj, params, ref, ref1, satellite;
      this.repo.pipeline();
      ref = warehouses.bdwps;
      for (i = 0, len = ref.length; i < len; i++) {
        bdwp = ref[i];
        id1 = bdwp.id;
        if (!bdwp.haszip) {
          continue;
        }
        found = false;
        ref1 = warehouses.satellites;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          satellite = ref1[j];
          if (!satellite.haszip) {
            continue;
          }
          distance = geodist({
            lat: parseInt(bdwp.lat),
            lon: parseInt(bdwp.lon)
          }, {
            lat: parseInt(satellite.lat),
            lon: parseInt(satellite.lon)
          });
          if (distance < 1000) {
            found = true;
            id2 = satellite.id;
            cost = distance;
            params = {
              sourcekind: 'Warehouse',
              sourceid: '' + id1,
              destinationkind: 'Warehouse',
              destinationid: '' + id2,
              kind: 'REPOSITION',
              linkid: id1 + '_' + id2
            };
            obj = {
              kind: 'REPOSITION',
              cost: cost,
              id: id1 + "_" + id2
            };
            console.log("satellite: " + JSON.stringify(params));
            this.repo.setEdge(params, obj);
          }
        }
        if (!found) {
          console.log("No satellite found close to this warehouse, uses postal codes or the code is not assigned.");
        }
      }
      this.repo.exec((function(_this) {
        return function(error, result) {
          if ((error != null)) {
            console.log("error:" + result);
            callback(error, result);
          } else {
            console.log("finished");
            callback(error, result);
          }
        };
      })(this));
    };

    Builder.prototype.buildWarehousesToSatellites = function(callback) {
      this.repo.find({
        type: "Zip"
      }, (function(_this) {
        return function(error, zips) {
          return _this.repo.find({
            type: "Warehouse"
          }, function(error, warehouses) {
            var collation;
            collation = cleanupAndCollateWarehouses(warehouses, zips);
            _this.wireupSatellites(collation, callback);
          });
        };
      })(this));
      return;
      return callback(null, true);
    };

    return Builder;

  })(iImport);

  module.exports = Builder;

}).call(this);

//# sourceMappingURL=WarehousesToSatellites.js.map
