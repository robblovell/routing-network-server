// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, Papa, async, fs, geodist, iImport, math, papaConfig,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  iImport = require('./../iImport');

  fs = require('fs');

  async = require('async');

  math = require('mathjs');

  geodist = require('geodist');

  fs = require('fs');

  Papa = require('babyparse');

  papaConfig = {
    delimiter: ",",
    newline: "",
    header: true,
    dynamicTyping: false,
    preview: 0,
    encoding: "UTF-8",
    worker: false,
    comments: false,
    step: void 0,
    download: false,
    skipEmptyLines: false,
    fastMode: false
  };

  Builder = (function(superClass) {
    extend(Builder, superClass);

    function Builder(config, repo1) {
      this.config = config;
      this.repo = repo1 != null ? repo1 : null;
      this.buildSkusToWarehouses = bind(this.buildSkusToWarehouses, this);
      this.wireupSkustoWarehouses = bind(this.wireupSkustoWarehouses, this);
    }

    Builder.prototype.setRepo = function(repo) {
      return this.repo = repo;
    };

    Builder.prototype.wireupSkustoWarehouses = function(aix, skus, warehouses, callback) {
      var i, id1, id2, len, obj, params, sku, warehouse;
      this.repo.pipeline();
      sku = skus[aix];
      if (sku != null) {
        id1 = sku.id;
        for (i = 0, len = warehouses.length; i < len; i++) {
          warehouse = warehouses[i];
          id2 = warehouse.id;
          params = {
            sourcekind: 'Sku',
            sourceid: '' + id1,
            destinationkind: 'Warehouse',
            destinationid: '' + id2,
            kind: 'SKUWAREHOUSE',
            linkid: id1 + '_' + id2
          };
          obj = {
            kind: 'SKUWAREHOUSE',
            id: id1 + "_" + id2,
            inventory: math.floor(math.random(0, 100))
          };
          this.repo.setEdge(params, obj);
        }
      }
      this.repo.exec((function(_this) {
        return function(error, result) {
          if ((error != null)) {
            console.log("error:" + result);
            callback(error, result);
          } else if (aix < skus.length) {
            console.log("Sku: " + aix + "  " + JSON.stringify(sku));
            _this.wireupSkustoWarehouses(aix + 1, skus, warehouses, callback);
          } else {
            console.log("finished");
            callback(error, result);
          }
        };
      })(this));
    };

    Builder.prototype.buildSkusToWarehouses = function(callback) {
      this.repo.find({
        type: "Sku"
      }, (function(_this) {
        return function(error, skus) {
          return _this.repo.find({
            type: "Warehouse"
          }, function(error, warehouses) {
            return _this.repo.find({
              type: "Seller"
            }, function(error, sellers) {
              warehouses = slice.call(warehouses).concat(slice.call(sellers));
              _this.wireupSkustoWarehouses(0, skus, warehouses, callback);
            });
          });
        };
      })(this));
    };

    return Builder;

  })(iImport);

  module.exports = Builder;

}).call(this);

//# sourceMappingURL=SkusToWarehouses.js.map
