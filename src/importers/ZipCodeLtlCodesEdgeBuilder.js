// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, async, fs, geodist, iImport, math,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./iImport');

  fs = require('fs');

  async = require('async');

  math = require('mathjs');

  geodist = require('geodist');

  Builder = (function(superClass) {
    var destination, kind, source;

    extend(Builder, superClass);

    function Builder(config, repo1) {
      this.config = config;
      this.repo = repo1 != null ? repo1 : null;
      this.build = bind(this.build, this);
      this.buildSkusToWarehouses = bind(this.buildSkusToWarehouses, this);
      this.buildWarehousesToZips = bind(this.buildWarehousesToZips, this);
      this.buildResuppliers = bind(this.buildResuppliers, this);
      this.buildSweeps = bind(this.buildSweeps, this);
      this.buildLtlCodesToLtlCodes = bind(this.buildLtlCodesToLtlCodes, this);
      this.buildZipsToLtlCodes = bind(this.buildZipsToLtlCodes, this);
      this.wireup = bind(this.wireup, this);
    }

    Builder.prototype.setRepo = function(repo) {
      return this.repo = repo;
    };

    source = 'Zip';

    destination = 'Zip';

    kind = 'ZipTo';

    Builder.prototype.wireup = function(aix, bix, nodes) {
      var anode, bnode, cost, distance, i, j, k, match, matchStr, params, ref, ref1;
      this.repo.pipeline();
      anode = nodes[aix];
      if ((anode != null)) {
        i = 0;
        for (k = j = ref = bix, ref1 = bix + 100; ref <= ref1 ? j < ref1 : j > ref1; k = ref <= ref1 ? ++j : --j) {
          bnode = nodes[k];
          if (bnode == null) {
            continue;
          }
          distance = geodist({
            lat: anode.lat,
            lon: anode.long
          }, {
            lat: bnode.lat,
            lon: bnode.lon
          });
          cost = math.floor(distance) + 10;
          params = {
            sourcekind: source,
            sourceid: anode.id,
            destinationkind: destination,
            destinationid: bnode.id,
            kind: kind,
            cost: cost
          };
          matchStr = "MATCH (a:" + params.sourcekind + " {id: " + params.sourceid + "}), (b:" + params.destinationkind + " {id: " + params.destinationid + "}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {" + params.kind + "}, inventory: " + params.inventory + "}]->(b) RETURN rel";
          if (i++ % 500 === 0) {
            console.log(matchStr);
          }
          match = "MATCH (a:" + params.sourcekind + " {id:{sourceid}}), (b:" + params.destinationkind + " {id:{destinationid}}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {kind}, cost: {cost}}]->(b) RETURN rel";
          this.repo.run(match, params);
        }
      }
      this.repo.exec((function(_this) {
        return function(error, result) {
          if (bix >= nodes.length) {
            bix = 0;
            aix += 1;
          }
          if (aix < nodes.length) {
            console.log("Wire up:" + (aix + 1) + " " + (bix + 1));
            _this.wireup(aix, bix + 100, nodes);
          } else {
            callback(error, result);
          }
        };
      })(this));
    };

    Builder.prototype.buildZipsToLtlCodes = function(callback) {
      this.repo.find({
        type: "Zip"
      }, (function(_this) {
        return function(error, nodes) {
          return _this.wireup(1, 1, nodes, callback);
        };
      })(this));
    };

    Builder.prototype.buildLtlCodesToLtlCodes = function(callback) {
      return callback(null, true);
    };

    Builder.prototype.buildSweeps = function(callback) {
      return callback(null, true);
    };

    Builder.prototype.buildResuppliers = function(callback) {
      return callback(null, true);
    };

    Builder.prototype.buildWarehousesToZips = function(callback) {
      return callback(null, true);
    };

    Builder.prototype.buildSkusToWarehouses = function(callback) {
      return callback(null, true);
    };

    Builder.prototype.build = function(callback) {
      async.parallel([
        (function(_this) {
          return function(callback) {
            return _this.buildZipsToLtlCodes(callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.buildLtlCodesToLtlCodes(callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.buildSweeps(callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.buildResuppliers(callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.buildWarehousesToZips(callback);
          };
        })(this), (function(_this) {
          return function(callback) {
            return _this.buildSkusToWarehouses(callback);
          };
        })(this)
      ], (function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };

    return Builder;

  })(iImport);

  module.exports = Builder;

}).call(this);

//# sourceMappingURL=ZipCodeLtlCodesEdgeBuilder.js.map
