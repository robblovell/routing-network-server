// Generated by CoffeeScript 1.10.0
(function() {
  var Papa, ZipCodeImporter, async, fs, iImport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./../iImport');

  Papa = require('babyparse');

  fs = require('fs');

  async = require('async');

  ZipCodeImporter = (function(superClass) {
    extend(ZipCodeImporter, superClass);

    function ZipCodeImporter(config) {
      this.config = config;
    }

    ZipCodeImporter.prototype["import"] = function(filename, repo, callback) {
      var contents, data, have, i, id, j, len, len1, result, zipcode;
      contents = fs.readFileSync(filename, 'utf8');
      result = Papa.parse(contents, this.config);
      data = result.data;
      repo.pipeline();
      for (i = 0, len = data.length; i < len; i++) {
        zipcode = data[i];
        zipcode.zip3 = zipcode.zip.substring(0, 3);
        zipcode.type = "Zip";
      }
      have = [];
      for (j = 0, len1 = data.length; j < len1; j++) {
        zipcode = data[j];
        id = zipcode.zip3;
        if (!have[id]) {
          console.log("zipcode: " + id);
          repo.set(id, zipcode, function(error, result) {
            if (error != null) {
              callback(error, null);
            }
          });
          have[id] = true;
        }
      }
      repo.exec(function(error, result) {
        return repo.run("CREATE INDEX ON :Zip(id)", {}, function(error, result) {
          return repo.run("CREATE INDEX ON :Zip(zip3)", {}, function(error, result) {
            return callback(error, result);
          });
        });
      });
    };

    return ZipCodeImporter;

  })(iImport);

  module.exports = ZipCodeImporter;

}).call(this);

//# sourceMappingURL=ZipCodeImporter.js.map
