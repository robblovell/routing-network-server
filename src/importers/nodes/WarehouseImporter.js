// Generated by CoffeeScript 1.10.0
(function() {
  var Importer, Papa, async, fs, iImport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./../iImport');

  Papa = require('babyparse');

  fs = require('fs');

  async = require('async');

  Importer = (function(superClass) {
    var setTruth;

    extend(Importer, superClass);

    function Importer(config) {
      this.config = config;
    }

    setTruth = function(flag) {
      if (flag === -1 || flag === '-1' || flag.toUpperCase() === 'TRUE' || flag === true || flag === 1 || flag === '1') {
        flag = true;
        return true;
      } else {
        flag = false;
        return false;
      }
    };

    Importer.prototype["import"] = function(filename, repo, callback) {
      var contents, data, result;
      contents = fs.readFileSync(filename, 'utf8');
      result = Papa.parse(contents, this.config);
      data = result.data;
      return async.series([
        (function(_this) {
          return function(callback) {
            return repo.run("CREATE INDEX ON :Seller(id)", {}, function(error, result) {
              return callback(error, result);
            });
          };
        })(this), (function(_this) {
          return function(callback) {
            return repo.run("CREATE INDEX ON :Warehouse(id)", {}, function(error, result) {
              return callback(error, result);
            });
          };
        })(this)
      ], (function(_this) {
        return function(error, result) {
          var i, id, k, len, node, v;
          if ((error != null)) {
            console.log("" + JSON.stringify(error));
            callback(error);
            return;
          }
          repo.pipeline();
          for (i = 0, len = data.length; i < len; i++) {
            node = data[i];
            if (_this.config.nodeIdName === '') {
              id = ((function() {
                var results;
                results = [];
                for (k in node) {
                  v = node[k];
                  results.push(v);
                }
                return results;
              })()).reduce(function(x, y) {
                return "" + x + "_" + y;
              });
            } else {
              id = node[_this.config.nodeIdName];
            }
            console.log("id: " + id);
            if (setTruth(node.isSeller)) {
              node.type = 'Seller';
            }
            if (setTruth(node.IsBDWP)) {
              node.type = 'Warehouse';
            }
            if (setTruth(node.IsResupplier)) {
              node.type = 'Warehouse';
            }
            if (setTruth(node.Satellite)) {
              node.type = 'Warehouse';
            }
            node.id = id;
            repo.set(id, node, function(error, result) {
              if (error != null) {
                callback(error, null);
              }
            });
          }
          repo.exec(callback);
        };
      })(this));
    };

    return Importer;

  })(iImport);

  module.exports = Importer;

}).call(this);

//# sourceMappingURL=WarehouseImporter.js.map
