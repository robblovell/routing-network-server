// Generated by CoffeeScript 1.10.0
(function() {
  var Importer, async, fs, geodist, iImport, math,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iImport = require('./iImport');

  fs = require('fs');

  async = require('async');

  math = require('mathjs');

  geodist = require('geodist');

  Importer = (function(superClass) {
    var destination, inventoryHi, inventoryLo, kind, source;

    extend(Importer, superClass);

    function Importer(config, repo1) {
      this.config = config;
      this.repo = repo1 != null ? repo1 : null;
      this.buildZipsToLtlCodes = bind(this.buildZipsToLtlCodes, this);
      this.zip2ltl = bind(this.zip2ltl, this);
      this.traverse = bind(this.traverse, this);
      this.wireup = bind(this.wireup, this);
    }

    source = 'Zip';

    destination = 'LtlCode';

    kind = 'ZipLtl';

    inventoryLo = 0;

    inventoryHi = 10;

    Importer.prototype.setRepo = function(repo) {
      return this.repo = repo;
    };

    Importer.prototype.wireup = function(aix, bix, aNodes, ltlCodes, callback) {
      var aNode, bNode, distance, i, len, ltlCode, match, matchStr, params;
      aNode = aNodes[aix];
      bNode = aNodes[bix];
      this.repo.pipeline();
      for (i = 0, len = ltlCodes.length; i < len; i++) {
        ltlCode = ltlCodes[i];
        distance = geodist({
          lat: parseInt(aNode.latitude),
          lon: parseInt(aNode.longitude)
        }, {
          lat: parseInt(bNode.latitude),
          lon: parseInt(bNode.longitude)
        });
        params = {
          sourcekind: source,
          sourcenid: aNode.id,
          destinationkind: destination,
          destinationnid: bNode.id,
          kind: kind,
          cost: math.floor(distance) + 10
        };
        matchStr = "MATCH (a:" + params.sourcekind + " {id: " + params.sourceid + "}), (b:" + params.destinationkind + " {id: " + params.destinationid + "}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {" + params.kind + "}, inventory: " + params.inventory + "}]->(b) RETURN rel";
        console.log(matchStr);
        match = "MATCH (a:" + params.sourcekind + " {name:{sourceid}}), (b:" + params.destinationkind + " {name:{destinationid}}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {kind}, cost: {cost}}]->(b) RETURN rel";
        this.repo.run(match, params);
      }
      return this.repo.exec((function(_this) {
        return function(error, result) {
          if (bix + 1 < bNode.length) {
            return _this.wireup(aix, bix + 1, aNodes, ltlCodes, callback);
          } else if (aix + 1 < bNode.length) {
            return _this.traverse(aix + 1, 1, aNodes, ltlCodes, callback);
          } else {
            return callback(error, result);
          }
        };
      })(this));
    };

    Importer.prototype.traverse = function(aix, bix, aNodes, ltlCodes, callback) {
      return this.wireup(aix, bix, aNodes, ltlCodes, callback);
    };

    Importer.prototype.zip2ltl = function(ix, nodes, ltlCodes, callback) {
      var aNode, i, len, ltlCode, match, matchStr, params;
      aNode = aNodes[aix];
      this.repo.pipeline();
      for (i = 0, len = ltlCodes.length; i < len; i++) {
        ltlCode = ltlCodes[i];
        params = {
          sourcekind: source,
          sourcenid: aNode.id,
          destinationkind: destination,
          destinationnid: bNode.id,
          kind: kind,
          cost: math.floor(distance) + 10
        };
        matchStr = "MATCH (a:" + params.sourcekind + " {id: " + params.sourceid + "}), (b:" + params.destinationkind + " {id: " + params.destinationid + "}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {" + params.kind + "}, inventory: " + params.inventory + "}]->(b) RETURN rel";
        console.log(matchStr);
        match = "MATCH (a:" + params.sourcekind + " {name:{sourceid}}), (b:" + params.destinationkind + " {name:{destinationid}}) CREATE (a)-[rel:" + params.kind.toUpperCase() + " {kind: {kind}, cost: {cost}}]->(b) RETURN rel";
      }
      this.repo.run(match, params);
      return this.repo.exec((function(_this) {
        return function(error, result) {
          return _this.wireup(aix, bix, aNodes, ltlCodes, callback);
        };
      })(this));
    };

    Importer.prototype.buildZipsToLtlCodes = function(callback) {
      this.repo.find({
        type: "Zip"
      }, (function(_this) {
        return function(error, aNodes) {
          var i, len, zip;
          for (i = 0, len = aNodes.length; i < len; i++) {
            zip = aNodes[i];
            _this.repo.find({
              type: "LtlCode"
            }, function(error, ltlCodes) {
              _this.traverse(1, 1, aNodes, ltlCodes, callback);
            });
          }
        };
      })(this));
    };

    Importer.prototype.wireupLtlCodes = function(aix, ltlCodes, callback) {
      var aCode;
      this.repo.pipeline();
      return aCode = ltlCodes[aix];
    };

    Importer.prototype.buildLtlCodesToLtlCodes = function(callback) {
      this.repo.find({
        type: "LtlCode"
      }, (function(_this) {
        return function(error, ltlCodes) {
          _this.wireupLtlCodes(1, 1, aNodes, ltlCodes, callback);
        };
      })(this));
      return callback(null, true);
    };

    Importer.prototype.buildSweeps = function(callback) {
      return callback(null, true);
    };

    Importer.prototype.buildResuppliers = function(callback) {
      return callback(null, true);
    };

    Importer.prototype.buildWarehousesToZips = function(callback) {
      return callback(null, true);
    };

    Importer.prototype.buildSkusToWarehouses = function(callback) {
      return callback(null, true);
    };

    Importer.prototype.buildEdges = function(callback) {
      async.parallel([
        function(callback) {
          return buildZipsToLtlCodes(callback);
        }, function(callback) {
          return buildLtlCodesToLtlCodes(callback);
        }, function(callback) {
          return buildSweeps(callback);
        }, function(callback) {
          return buildResuppliers(callback);
        }, function(callback) {
          return buildWarehousesToZips(callback);
        }, function(callback) {
          return buildSkusToWarehouses(callback);
        }
      ], function(error, result) {
        return callback(error, result);
      });
    };

    Importer.prototype["import"] = function(repo, callback) {
      buildEdges(repo, callback);
    };

    return Importer;

  })(iImport);

  module.exports = Importer;

}).call(this);

//# sourceMappingURL=EdgeBuilder.js.map
