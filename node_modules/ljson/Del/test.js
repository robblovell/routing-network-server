// This just deeply evaluates and stringifies a 
// JS function (so we can inspect its normal form).
function normalizedSource(value){
    var nextVarId = 0;
    return (function normalize(value){
        function application(variable, argList){
            var app = function(arg){
                return arg === null
                    ? variable+(argList.length>0?"("+argList.join(")(")+")":"")
                    : application(variable, argList.concat(normalize(arg)));
            };
            app.isApplication = true;
            return app;
        };
        if (value.isApplication) 
            return value(null);
        else if (typeof value === "function") {
            var varName = "v"+(nextVarId++);
            var body    = normalize(value(application(varName,[])));
            return "(function("+varName+"){return "+body+"})";
        } else return value;
    })(value);
};

// The offending term
M = (function(a){return a((function(b){return (function(c){return (function(d){return (function(e){return b((function(f){return (function(g){return g(d)(c)(f((function(h){return (function(i){return i})})))})}))((function(f){return (function(g){return g(c)(d)(f(g))})}))((function(f){return e}))((function(f){return (function(g){return f})}))})})})}))((function(b){return (function(c){return (function(d){return b(b(b(b(b(b(b(b(d))))))))})})}))});

// Hacky way to make church numbers (you can do it by hand, same results)
C = (function (n){return function(f){return function(x){ for (var i=0; i<n; ++i) x = f(x); return x; }}});

// Term we are evaluating
term = M(C(600));

console.log(normalizedSource(term));


