{
  "_args": [
    [
      {
        "name": "leafy",
        "raw": "leafy@~0.0.3",
        "rawSpec": "~0.0.3",
        "scope": null,
        "spec": ">=0.0.3 <0.1.0",
        "type": "range"
      },
      "/Users/robblovell/src/builddirect/network-server/node_modules/nools"
    ]
  ],
  "_from": "leafy@>=0.0.3 <0.1.0",
  "_id": "leafy@0.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/leafy",
  "_npmUser": {
    "email": "doug@dougamartin.com",
    "name": "damartin"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "leafy",
    "raw": "leafy@~0.0.3",
    "rawSpec": "~0.0.3",
    "scope": null,
    "spec": ">=0.0.3 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nools"
  ],
  "_resolved": "http://registry.npmjs.org/leafy/-/leafy-0.0.3.tgz",
  "_shasum": "a8af1c34bade152bdc7a3d67125bfbe5c25bffdf",
  "_shrinkwrap": null,
  "_spec": "leafy@~0.0.3",
  "_where": "/Users/robblovell/src/builddirect/network-server/node_modules/nools",
  "author": {
    "name": "Doug Martin"
  },
  "bugs": {
    "url": "https://github.com/doug-martin/leafy/issues"
  },
  "dependencies": {
    "array-extended": "~0.0.3",
    "declare.js": "~0.0.3",
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "string-extended": "~0.0.3"
  },
  "description": "Different Tree Implementations",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-it": "~0.3.0",
    "it": "~0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a8af1c34bade152bdc7a3d67125bfbe5c25bffdf",
    "tarball": "https://registry.npmjs.org/leafy/-/leafy-0.0.3.tgz"
  },
  "homepage": "https://github.com/doug-martin/leafy#readme",
  "keywords": [
    "DataStructures",
    "Tree",
    "AVL",
    "AVL Tree",
    "Red Black Tree",
    "Andersson Tree"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "doug@dougamartin.com",
      "name": "damartin"
    }
  ],
  "name": "leafy",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/leafy.png?branch=master)](https://travis-ci.org/doug-martin/leafy)\n\n[![browser support](http://ci.testling.com/doug-martin/leafy.png)](http://ci.testling.com/doug-martin/leafy)\n\n# Leafy\n\n`leafy` is a library of different tree implementations. `leafy` can be used in both the browser and node.\n\nWhy would I need a tree in javascript? I have arrays and objects.\n\nGood question!\n\nThe driving reason behind the creation of `leafy` was the library [`nools`](https://github.com/C2FO/nools) which needed a datastructure that was\n\n * fast\n * maintained order\n * could have items inserted into it without having to re-sort the entire structure.\n\nThis was needed in order to maintain a real time list of rule activations without having to search or sort the actions on insertion.\n\nOften a tree is overkill but when you need one its good to know its out there.\n\n## Installation\n\n```\nnpm install leafy\n```\n\nOr [download the source](https://raw.github.com/doug-martin/leafy/master/index.js) ([minified](https://raw.github.com/doug-martin/leafy/master/leafy.min.js))\n\n**Note** `leafy` depends on [`declare.js`](https://github.com/doug-martin/declare.js), [`extended`](https://github.com/doug-martin/extended), [`is-extended`](https://github.com/doug-martin/is-extended), [`string-extended`](https://github.com/doug-martin/extended), and [`array-extended`](https://github.com/doug-martin/array-extended)\n\n\n## Usage\n\n`leafy` contains the following tree implementations.\n\n * [`AVLTree`](http://en.wikipedia.org/wiki/AVL_tree)\n * [`RedBlackTree`](http://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n * [`BinaryTree`](http://en.wikipedia.org/wiki/Binary_tree)\n * [`AnderssonTree`](http://en.wikipedia.org/wiki/AA_tree)\n\n**`options`**\n\nWhen creating a tree you can specify a compare function used to sort items as they are inserted or removed.\n\n```javscript\nvar tree = new leafy.AVLTree({\n   compare : function(a, b){\n       var ret = 0;\n       if (a.type > b.type) {\n           ret = 1;\n       } else if (a.type < b.type) {\n           ret = -1;\n       }\n       return ret;\n   }\n});\n```\n\nBy default the tree uses a natural ordering function.\n\n```javascript\nfunction compare(a, b) {\n   var ret = 0;\n   if (a > b) {\n       return 1;\n   } else if (a < b) {\n       return -1;\n   } else if (!b) {\n       return 1;\n   }\n   return ret;\n}\n```\n\nEach tree contains the following functions.\n\n**`insert`**\n\nInsert an item into an the tree.\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"aa\");\n```\n\n**`remove`**\n\nRemove an item from a tree.\n\n```\ntree.remove(\"a\");\ntree.remove(\"c\");\n```\n\n**`clear`**\n\nRemove all items from a tree.\n\n```javascript\n\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"aa\");\n\ntree.clear();\n\n```\n\n**`isEmpty`**\n\nReturns a boolean indicating if the tree is currently empty.\n\n```\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"aa\");\n\ntree.isEmpty(); //false\n\ntree.clear();\n\ntree.isEmpty(); //true\n```\n\n**`contains`**\n\nTest if a tree contains a particular value.\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\n\ntree.contains(\"a\"); //true\ntree.contains(\"d\"); //false\n```\n\n**`toArray([order=leafy.IN_ORDER]);\n\nCoverts a tree to an array with the values in the order specified, or in order if not specified\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\n\ntree.toArray(); //[\"a\", \"b\", \"c\", \"d\"]\ntree.toArray(leafy.REVERSE_ORDER); //[\"d\", \"c\", \"b\", \"a\"]\n```\n\n**`forEach(iterator(iterator[, scope[, order=leafy.IN_ORDER]])`**\n\nLoop through the items in tree.\n\nBy default the tree will loop through items in order.\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"aa\");\n\ntree.forEach(function(item, tree){\n    console.log(item); //\"a\", \"b\", \"c\", \"d\" respectively\n});\n```\n\nYou can loop through a tree in any order you wish by specifying any of the following orders.\n\n* `leafy.REVERSE_ORDER`\n* `leafy.IN_ORDER`\n* `leafy.POST_ORDER`\n* `leafy.PRE_ORDER`\n\n```javascript\n\ntree.forEach(function(item, tree){\n    console.log(item); //\"d\", \"c\", \"b\", \"a\" respectively\n}, null, leafy.REVERSE_ORDER);\n\n```\n\n\n**`map(iterator[, scope[, order=leafy.IN_ORDER]])`**\n\nMap is very similar to the array counter part except that it returns new tree with the mapped values.\n\n```javascript\n//creates a new tree with the returned values \"aa\", \"bb\", \"cc\", \"dd\"\nvar mapped = tree.map(function(item, tree){\n    return item + item;\n});\n\n```\n\n**`filter(iterator[, scope[, order=leafy.IN_ORDER]])`**\n\nFilter is very similar to the array counter part except that it returns new tree with the mapped values.\n\n```javascript\n//creates a new tree with the returned values \"a\", \"b\"\nvar mapped = tree.map(function(item, tree){\n    return item === \"a\" || item === \"b\";\n});\n\n```\n\n### Other iterator methods.\n\nTrees also contains the following array methods that act just like their array counter part.\n\n**Note** all of these methods accept an order parameter.\n\n* `reduce`\n* `reduceRight`\n* `every`\n* `some`\n\n**`findLessThan(value[, exclusive=true])`**\n\nFind all values in a tree less than a particular value. If exclusive is set to false then the original value will be included in the resulting array.\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"d\");\n\ntree.findLessThan(\"d\"); //[\"a\", \"b\", \"c\"];\ntree.findLessThan(\"d\", false); //[\"a\", \"b\", \"c\", \"d\"];\n\n```\n\n**`findGreaterThan(value[, exclusive=true])`**\n\nFind all values in a tree greater than a particular value. If exclusive is set to false then the original value will be included in the resulting array.\n\n```javascript\ntree.insert(\"a\");\ntree.insert(\"b\");\ntree.insert(\"c\");\ntree.insert(\"d\");\n\ntree.findGreaterThan(\"a\"); //[\"d\", \"c\", \"b\"];\ntree.findGreaterThan(\"a\", false); //[\"d\", \"c\", \"b\", \"a\"];\n\n```\n\n**`print()`**\n\nPrints the current structure of a tree to the console.\n\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/doug-martin/leafy.git"
  },
  "scripts": {
    "test": "it -r tap"
  },
  "testling": {
    "browsers": [
      "ie/8..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ],
    "files": "test/browserling.js"
  },
  "version": "0.0.3"
}
