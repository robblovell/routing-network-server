// Generated by CoffeeScript 1.10.0
(function() {
  var MongooseRepostitory, Neo4jRepostitory, Papa, RedisRepostitory, RestRepostitory, assert, async, fs, importer, should;

  should = require('should');

  assert = require('assert');

  importer = require('../src/importers/importZipCodes');

  async = require('async');

  RedisRepostitory = require('../src/repositories/RedisRepository');

  RestRepostitory = require('../src/repositories/RestRepository');

  MongooseRepostitory = require('../src/repositories/MongooseRepository');

  Neo4jRepostitory = require('../src/repositories/Neo4jRepository');

  fs = require('fs');

  Papa = require('babyparse');

  describe('Errata', function() {
    var checkAllZipCodes;
    checkAllZipCodes = (function(_this) {
      return function(filename, repo, done) {
        var contents, data, getZipFuncs, have, i, id, j, len, make, result, zipcode;
        contents = fs.readFileSync(filename, 'utf8');
        result = Papa.parse(contents, _this.config);
        data = result.data;
        make = function(id, type) {
          return function(callback) {
            return repo.get({
              id: id,
              type: type
            }, function(error, result) {
              JSON.parse(result).zip3.should.be.equal(id);
              callback(null, result);
            });
          };
        };
        getZipFuncs = [];
        have = [];
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          zipcode = data[i];
          if (i === 0) {
            continue;
          }
          id = zipcode[0].substring(0, 3);
          if (!have[id] && id !== "") {
            getZipFuncs.push(make(id, 'Zip'));
            have[id] = true;
          }
        }
        async.parallelLimit(getZipFuncs, 1, function(error, results) {
          if (error) {
            console.log('error' + error);
          }
          done();
        });
      };
    })(this);
    return it('Imports ZipCodes Neo4j', function(done) {
      var filename, repo, repoConfig;
      repoConfig = {
        user: 'neo4j',
        pass: 'macro7'
      };
      repo = new Neo4jRepostitory(repoConfig);
      filename = './data/zipcodes.csv';
      importer["import"](filename, repo, function(error, results) {
        if ((error != null)) {
          done();
          return;
        }
        repo.get({
          id: '852',
          type: 'Zip'
        }, function(error, result) {
          var zip;
          if ((error != null)) {
            done();
            return;
          }
          zip = JSON.parse(result);
          zip.zip3.should.be.equal('852');
          zip.zip.should.be.equal('85200');
          zip.city.should.be.equal('Mesa');
          checkAllZipCodes(filename, repo, done);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=test_import_zipcodes.js.map
