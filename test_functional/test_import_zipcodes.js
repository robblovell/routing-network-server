// Generated by CoffeeScript 1.10.0
(function() {
  var MongooseRepostitory, Papa, RedisRepostitory, RestRepostitory, assert, async, fs, importer, should;

  should = require('should');

  assert = require('assert');

  importer = require('../src/importers/importZipCodes');

  async = require('async');

  RedisRepostitory = require('../src/repositories/RedisRepository');

  RestRepostitory = require('../src/repositories/RestRepository');

  MongooseRepostitory = require('../src/repositories/MongooseRepository');

  fs = require('fs');

  Papa = require('babyparse');

  describe('Errata', function() {
    var checkAllZipCodes, checkAllZipCodes_KeyValue;
    checkAllZipCodes_KeyValue = (function(_this) {
      return function(filename, repo, done) {
        var contents, data, getZipFuncs, i, id, j, len, make, result, zipcode;
        contents = fs.readFileSync(filename, 'utf8');
        result = Papa.parse(contents, _this.config);
        data = result.data;
        make = function(id) {
          return function(callback) {
            return repo.get(id, function(error, result) {
              JSON.parse(result).zip.should.be.equal(id);
              console.log(result);
              return callback(null, result);
            });
          };
        };
        getZipFuncs = [];
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          zipcode = data[i];
          if (i === 0) {
            continue;
          }
          id = zipcode[0];
          getZipFuncs.push(make(id));
        }
        async.parallelLimit(getZipFuncs, 1, function(error, results) {
          if (error) {
            console.log('error' + error);
          }
          return done();
        });
      };
    })(this);
    checkAllZipCodes = (function(_this) {
      return function(filename, repo, done) {
        var contents, data, getZipFuncs, i, id, j, len, make, result, zipcode;
        contents = fs.readFileSync(filename, 'utf8');
        result = Papa.parse(contents, _this.config);
        data = result.data;
        make = function(id) {
          return function(callback) {
            return repo.find(JSON.stringify({
              zip: id
            }), function(error, result) {
              result.body[0].zip.should.be.equal(id);
              return callback(null, result);
            });
          };
        };
        getZipFuncs = [];
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          zipcode = data[i];
          if (i === 0) {
            continue;
          }
          id = zipcode[0];
          getZipFuncs.push(make(id));
        }
        async.parallelLimit(getZipFuncs, 1, function(error, results) {
          if (error) {
            console.log('error' + error);
          }
          return done();
        });
      };
    })(this);
    return it('Imports ZipCodes Redis', function(done) {
      var filename, redisRepoConfig, repo;
      redisRepoConfig = {
        url: 'redis://127.0.0.1:6379/1'
      };
      repo = new RedisRepostitory(redisRepoConfig);
      filename = './data/zipcodes.csv';
      return importer.importKeyValue(filename, repo, function(error, results) {
        return repo.get('85281', function(error, result) {
          var zip;
          zip = JSON.parse(result);
          zip.zip.should.be.equal('85281');
          console.log(zip);
          result.should.be.equal('{"zip":"85281","city":"Tempe","state":"AZ","latitude":"33.426885","longitude":"-111.92733","timezone":"-7","dst":"0"}');
          return checkAllZipCodes_KeyValue(filename, repo, done);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=test_import_zipcodes.js.map
