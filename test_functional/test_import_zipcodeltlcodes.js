// Generated by CoffeeScript 1.10.0
(function() {
  var MongooseRepostitory, Neo4jRepostitory, Papa, RedisRepostitory, RestRepostitory, assert, async, fs, importer, math, should;

  should = require('should');

  assert = require('assert');

  math = require('mathjs');

  importer = require('../src/importers/importZipCodes');

  async = require('async');

  RedisRepostitory = require('../src/repositories/RedisRepository');

  RestRepostitory = require('../src/repositories/RestRepository');

  MongooseRepostitory = require('../src/repositories/MongooseRepository');

  Neo4jRepostitory = require('../src/repositories/Neo4jRepository');

  fs = require('fs');

  Papa = require('babyparse');

  describe('Errata', function() {
    var checkAllZipCodes;
    checkAllZipCodes = (function(_this) {
      return function(filename1, filename2, repo, done) {
        var LtlCodes, ZipCodes, contents, contentsCodes, getZipFuncs, i, id, j, k, key, len, len1, ltlcode, make, result1, result2, zip3s, zipcode;
        contents = fs.readFileSync(filename1, 'utf8');
        result1 = Papa.parse(contents, _this.config);
        ZipCodes = result1.data;
        contentsCodes = fs.readFileSync(filename2, 'utf8');
        result2 = Papa.parse(contentsCodes, _this.config);
        LtlCodes = result2.data;
        make = function(id, type) {
          return function(callback) {
            return repo.get({
              id: id,
              type: type
            }, function(error, result) {
              JSON.parse(result).id.should.be.equal(id);
              callback(null, result);
            });
          };
        };
        getZipFuncs = [];
        zip3s = {};
        for (i = j = 0, len = ZipCodes.length; j < len; i = ++j) {
          zipcode = ZipCodes[i];
          if (i === 0) {
            continue;
          }
          zipcode.zip3 = zipcode[0].substring(0, 3);
          if (!zip3s[zipcode.zip3]) {
            zipcode.type = "Zip";
            zipcode.zip = [zipcode.zip];
            zip3s[zipcode.zip3] = zipcode;
          } else {
            zip3s[zipcode.zip3].zip.push(zipcode.zip);
          }
        }
        for (i = k = 0, len1 = LtlCodes.length; k < len1; i = ++k) {
          ltlcode = LtlCodes[i];
          if (i === 0) {
            continue;
          }
          if (math.floor(math.random(0, 100) > 0)) {
            continue;
          }
          for (key in zip3s) {
            zipcode = zip3s[key];
            if (math.floor(math.random(0, 300) > 0)) {
              continue;
            }
            zipcode.ltlCode = ltlcode[0];
            zipcode.weightLo = ltlcode[1];
            zipcode.weightHi = ltlcode[2];
            id = zipcode.zip3 + "_" + zipcode.ltlCode + "_" + zipcode.weightLo + "_" + zipcode.weightHi;
            zipcode.id = id;
            if (id !== "") {
              getZipFuncs.push(make(id, 'Zip'));
            }
          }
        }
        console.log("Test for this many zips:" + getZipFuncs.length);
        async.parallelLimit(getZipFuncs, 1, function(error, results) {
          if (error) {
            console.log('error' + error);
          }
          done();
        });
      };
    })(this);
    return it('Imports ZipCodes Neo4j', function(done) {
      var filename1, filename2, repo, repoConfig;
      repoConfig = {
        user: 'neo4j',
        pass: 'macro7'
      };
      repo = new Neo4jRepostitory(repoConfig);
      filename1 = './data/zipcodes.csv';
      filename2 = './data/weights-codes.csv';
      return importer["import"](filename1, filename2, repo, function(error, results) {
        if ((error != null)) {
          console.log("error: " + error);
          assert(false);
          done();
          return;
        }
        repo.get({
          id: '002_1000_0_100',
          type: 'Zip'
        }, function(error, result) {
          var zip;
          if ((error != null)) {
            console.log("error: " + error);
            assert(false);
            done();
            return;
          }
          zip = JSON.parse(result);
          zip.zip3.should.be.equal('002');
          zip.city.should.be.equal('Portsmouth');
          checkAllZipCodes(filename1, filename2, repo, done);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=test_import_zipcodeltlcodes.js.map
